{
    "contents" : "\nif (VERBOSE)\n{\n\tprint(\"Extracting text from tweets & calculating sentiment scores\")\n\tflush.console()\n}\n\n# obviously, this is not an elegant way to repeat an operation, but\n# we do end up with lots of objects in memory to play with (it _is_\n# a tutorial, after all :)\n\namerican.text = laply(american.tweets, function(t) t$getText() )\ndelta.text = laply(delta.tweets, function(t) t$getText() )\njetblue.text = laply(jetblue.tweets, function(t) t$getText() )\nsouthwest.text = laply(southwest.tweets, function(t) t$getText() )\nunited.text = laply(united.tweets, function(t) t$getText() )\nus.text = laply(us.tweets, function(t) t$getText() )\n\namerican.scores = score.sentiment(american.text, pos.words, neg.words, .progress='text')\ndelta.scores = score.sentiment(delta.text, pos.words, neg.words, .progress='text')\njetblue.scores = score.sentiment(jetblue.text, pos.words, neg.words, .progress='text')\nsouthwest.scores = score.sentiment(southwest.text, pos.words, neg.words, .progress='text')\nunited.scores = score.sentiment(united.text, pos.words, neg.words, .progress='text')\nus.scores = score.sentiment(us.text, pos.words, neg.words, .progress='text')\n\namerican.scores$airline = 'American'\namerican.scores$code = 'AA'\ndelta.scores$airline = 'Delta'\ndelta.scores$code = 'DL'\njetblue.scores$airline = 'JetBlue'\njetblue.scores$code = 'B6'\nsouthwest.scores$airline = 'Southwest'\nsouthwest.scores$code = 'WN'\nunited.scores$airline = 'United'\nunited.scores$code = 'UA'\nus.scores$airline = 'US Airways'\nus.scores$code = 'US'\n\nall.scores = rbind( american.scores, delta.scores, jetblue.scores, \n\t\t\t\t\tsouthwest.scores, united.scores, us.scores )\n\nif (VERBOSE)\n\tprint(\"Plotting score distributions\")\n\n# ggplot works on data.frames, always\ng.hist = ggplot(data=all.scores, mapping=aes(x=score, fill=airline) )\n\n# add a bar graph layer. Let it bin the data and compute frequencies\n# (set binwidth=1 since scores are integers)\ng.hist = g.hist + geom_bar( binwidth=1 )\n\n# make a separate plot for each airline\ng.hist = g.hist + facet_grid(airline~.)\n\n# plain display, nice colors\ng.hist = g.hist + theme_bw() + scale_fill_brewer() \n\nprint(g.hist)\nggsave(file.path(outputDir, 'twitter_score_histograms.pdf'), g.hist, width=6, height=5.5)\n\n\nif (VERBOSE)\n\tprint(\"Comparing Twitter & ACSI data\")\n\nall.scores$very.pos.bool = all.scores$score >= 2\nall.scores$very.neg.bool = all.scores$score <= -2\n\nall.scores$very.pos = as.numeric( all.scores$very.pos.bool )\nall.scores$very.neg = as.numeric( all.scores$very.neg.bool )\n\ntwitter.df = ddply(all.scores, c('airline', 'code'), summarise, \n                   very.pos.count=sum( very.pos ), \n                   very.neg.count=sum( very.neg ) )\n\ntwitter.df$very.tot = twitter.df$very.pos.count + \n                        twitter.df$very.neg.count\n\ntwitter.df$score = round( 100 * twitter.df$very.pos.count / \n                                twitter.df$very.tot )\n\nrequire(doBy)\norderBy(~-score, twitter.df)\n\ncompare.df = merge(twitter.df, acsi.df, by=c('code', 'airline'), \n                   suffixes=c('.twitter', '.acsi'))\n\n\n# build scatter plot\ng.scatter = ggplot( compare.df, aes(x=score.twitter, y=score.acsi) ) + \n\t\t\t      geom_point( aes(color=airline), size=5 ) + \n\t\t\t      theme_bw() + opts( legend.position=c(0.2, 0.85) )\n\n# have ggplot2 fit and plot a linear model with R's lm() function\ng.fit = g.scatter + geom_smooth(aes(group=1), se=F, method=\"lm\")\n\nprint(g.scatter)\nprint(g.fit)\n\nggsave(file.path(outputDir, 'twitter_acsi_comparison.pdf'), g.scatter, width=7, height=7)\nggsave(file.path(outputDir, 'twitter_acsi_comparison_with_fit.pdf'), g.fit, width=7, height=7)\n",
    "created" : 1360127212562.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4249686777",
    "id" : "DAA0FD50",
    "lastKnownWriteTime" : 1310526416,
    "path" : "~/Desktop/informaticsrepo/Evidene_Based_Project_Repo /JB Tutorial/R/2_run.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}